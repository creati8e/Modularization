// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.kotlin_version = '1.3.10'
    ext.nav_version = "1.0.0-alpha07"

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.vanniktech:gradle-dependency-graph-generator-plugin:0.5.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

configure(subprojects) {

    afterEvaluate {
        android {
            compileSdkVersion 28
            buildToolsVersion '28.0.3'

            defaultConfig {
                minSdkVersion 21
                targetSdkVersion 28
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
    }

    project.configurations.all {
        resolutionStrategy {
            force "androidx.cardview:cardview:1.0.0"
            force "androidx.recyclerview:recyclerview:1.0.0"
            force "com.google.android.material:material:1.0.0"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
apply plugin: "com.vanniktech.dependency.graph.generator"

import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator
import guru.nidi.graphviz.attribute.Color
import guru.nidi.graphviz.attribute.Style

plugins.apply(DependencyGraphGeneratorPlugin)

//task name is generateDependencyGraphModules
def modulesGenerator = new Generator(
        "Modules", // Suffix for our Gradle task.
        { dependency ->
            def with = dependency.getModuleGroup().startsWith("Modularization")
            if (with) {
                System.out.println(dependency.getModule().getId().toString())
            }
            with
        }, // Only want Firebase.
        { dependency -> false }, // Include transitive dependencies.
        { node, dependency -> node.add(Style.FILLED, Color.rgb("#ffcb2b")) }, // Give them some color.
)

dependencyGraphGenerator {
    generators = [ modulesGenerator ]
}